name: Release Actions

# Org Secrets:
# - GHCR_USERNAME: GitHub Container Registry username (organization name)
# - GH_USERNAME: GitHub username (an organization admin)
# - GH_TOKEN: GitHub Container Registry token (PAT from an organization admin)
# - QUAY_USERNAME: Quay.io username
# - QUAY_PASSWORD: Quay.io password
# - DOCKERHUB_LOGINNAME: Docker Hub login username
# - DOCKERHUB_PASSWORD: Docker Hub password
# - DOCKERHUB_ORGNAME: Docker Hub organization name

on:
  release:
    types: [ published ]

jobs:
  handle-docker-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_LOGINNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push Docker Images
        run: |
          IMAGE_NAME=$(basename ${{ github.repository }})
          IMAGE_NAME=$(echo $IMAGE_NAME | tr '[:upper:]' '[:lower:]')
          OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')
          TAG=$(echo ${{ github.event.release.tag_name }} | tr '[:upper:]' '[:lower:]')
          docker buildx create --use
          docker buildx inspect --bootstrap
          docker buildx build --platform linux/amd64,linux/arm64 --push -t ghcr.io/${OWNER}/${IMAGE_NAME}:${TAG} -t ghcr.io/${OWNER}/${IMAGE_NAME}:latest .
          docker buildx build --platform linux/amd64,linux/arm64 --push -t ${{ secrets.DOCKERHUB_ORGNAME }}/${IMAGE_NAME}:${TAG} -t ${{ secrets.DOCKERHUB_ORGNAME }}/${IMAGE_NAME}:latest .

      - name: Export Docker images to tar files
        run: |
          IMAGE_NAME=$(basename ${{ github.repository }})
          IMAGE_NAME=$(echo $IMAGE_NAME | tr '[:upper:]' '[:lower:]')
          TAG=$(echo ${{ github.event.release.tag_name }} | tr '[:upper:]' '[:lower:]')
          ARCHS="amd64 arm64"
          for ARCH in $ARCHS; do
            FILE_NAME=docker-img_${IMAGE_NAME}_${TAG}_linux-${ARCH}.tar
            docker pull --platform linux/$ARCH ${{ secrets.DOCKERHUB_ORGNAME }}/${IMAGE_NAME}:${TAG}
            docker save -o $FILE_NAME ${{ secrets.DOCKERHUB_ORGNAME }}/${IMAGE_NAME}:${TAG}
            echo "FILE_NAME_$ARCH=$FILE_NAME" >> $GITHUB_ENV
          done

      - name: Upload Docker image tar (amd64) to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.FILE_NAME_amd64 }}
          asset_name: ${{ env.FILE_NAME_amd64 }}
          asset_content_type: application/x-tar

      - name: Upload Docker image tar (arm64) to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.FILE_NAME_arm64 }}
          asset_name: ${{ env.FILE_NAME_arm64 }}
          asset_content_type: application/x-tar

  handle-file-updates:
    runs-on: ubuntu-latest
    needs: handle-docker-images

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Get previous tag
        id: prev-tag
        run: |
          git fetch --tags
          tags=$(git tag --sort=-creatordate | tr '\n' ' ')
          echo "All tags: $tags"
          tag_count=$(echo "$tags" | wc -w)
          echo "Tag count: $tag_count"
          if [ "$tag_count" -lt 2 ]; then
            echo "Not enough tags to determine previous tag."
            echo "UPDATE_README=false" >> $GITHUB_ENV
            prev_tag=""
          else
            prev_tag=$(echo "$tags" | awk '{print $2}')
            if [ -z "$prev_tag" ]; then
              echo "Error: Could not determine previous tag." >&2
              exit 1
            fi
            echo "Previous tag is $prev_tag"
            echo "UPDATE_README=true" >> $GITHUB_ENV
          fi
          echo "PREV_TAG=$prev_tag" >> $GITHUB_ENV

      - name: Get current tag
        id: curr-tag
        run: echo "CURR_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Get branch for release
        id: branch
        run: echo "BRANCH=main" >> $GITHUB_ENV

      - name: Update version numbers
        if: env.PREV_TAG != ''
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
          PREV_TAG: ${{ env.PREV_TAG }}
          CURR_TAG: ${{ env.CURR_TAG }}
        run: python .github/scripts/UpdateVersionNumber.py $GITHUB_WORKSPACE $PREV_TAG $CURR_TAG

      - name: Configure Git
        run: |
          git config --global user.name 'version-updater[bot]'
          git config --global user.email 'github-actions@github.com'

      - name: Commit changes if any
        run: |
          git add .
          if git diff-index --quiet HEAD --; then
            echo "No changes to commit"
          else
            git commit -m "Update version from ${{ env.PREV_TAG }} to ${{ env.CURR_TAG }}"
          fi

      - name: Push changes
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          branch: ${{ env.BRANCH }}

      - name: Pull latest changes
        run: git pull origin ${{ env.BRANCH }}

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Get README content
        id: get_readme
        run: |
          readme_content=$(cat README.md)
          echo "README content: $readme_content"
          echo "::set-output name=content::$readme_content"

      - name: Convert repository name to lowercase
        id: set-repo-name
        run: echo "REPO_NAME=$(echo ${{ github.repository }} | awk -F/ '{print tolower($2)}')" >> $GITHUB_ENV

      - name: Set DockerHub repository
        id: set-dockerhub-repo
        run: echo "DOCKERHUB_REPO=${{ secrets.DOCKERHUB_ORGNAME }}/$(echo ${{ github.repository }} | awk -F/ '{print tolower($2)}')" >> $GITHUB_ENV

      - name: Update DockerHub README
        uses: peter-evans/dockerhub-description@v2
        with:
          username: ${{ secrets.DOCKERHUB_LOGINNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: ${{ env.DOCKERHUB_REPO }}
          readme-filepath: README.md